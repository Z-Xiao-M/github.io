<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>包里装着个卡比兽</title><link>https://Z-Xiao-M.github.io/github.io</link><description>待会去码头整点薯条🍟</description><copyright>包里装着个卡比兽</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://z-xiao-m.github.io/github.io/avatar.svg</url><title>avatar</title><link>https://Z-Xiao-M.github.io/github.io</link></image><lastBuildDate>Mon, 01 Sep 2025 07:07:59 +0000</lastBuildDate><managingEditor>包里装着个卡比兽</managingEditor><ttl>60</ttl><webMaster>包里装着个卡比兽</webMaster><item><title>羲和（Halo）数据库RAW类型初体验</title><link>https://Z-Xiao-M.github.io/github.io/post/xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-RAW-lei-xing-chu-ti-yan.html</link><description>一、RAW类型回顾
=========

在Oracle数据库中，RAW类型是一种可变长数据类型，一般用于存储二进制数据。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-RAW-lei-xing-chu-ti-yan.html</guid><pubDate>Mon, 01 Sep 2025 07:07:24 +0000</pubDate></item><item><title>打破认知幻像：你写的SQL是否如你心意？</title><link>https://Z-Xiao-M.github.io/github.io/post/da-po-ren-zhi-huan-xiang-%EF%BC%9A-ni-xie-de-SQL-shi-fou-ru-ni-xin-yi-%EF%BC%9F.html</link><description>一、前言
====

最近网上冲浪的时候，翻着翻着翻到一篇有趣的文章，估摸着应该是盖老师写的。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/da-po-ren-zhi-huan-xiang-%EF%BC%9A-ni-xie-de-SQL-shi-fou-ru-ni-xin-yi-%EF%BC%9F.html</guid><pubDate>Mon, 01 Sep 2025 06:55:16 +0000</pubDate></item><item><title>Oracle、PostgreSQL、羲和（Halo）数据库中的的IN、OUT 和 INOUT参数模式</title><link>https://Z-Xiao-M.github.io/github.io/post/Oracle%E3%80%81PostgreSQL%E3%80%81-xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-zhong-de-de-IN%E3%80%81OUT%20-he-%20INOUT-can-shu-mo-shi.html</link><description>一、前言
----

前些天看到PostgreSQL分会在微信上的一则翻译分享，标题为Oracle 与 PostgreSQL 中的 IN、OUT 和 INOUT 参数。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/Oracle%E3%80%81PostgreSQL%E3%80%81-xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-zhong-de-de-IN%E3%80%81OUT%20-he-%20INOUT-can-shu-mo-shi.html</guid><pubDate>Mon, 01 Sep 2025 06:53:37 +0000</pubDate></item><item><title>羲和（Halo）数据库——DBMS_RANDOM浅尝</title><link>https://Z-Xiao-M.github.io/github.io/post/xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-%E2%80%94%E2%80%94DBMS_RANDOM-qian-chang.html</link><description>&lt;html&gt;
&lt;body&gt;
&lt;!--StartFragment--&gt;&lt;p style='padding: 0px; margin: 10px 0px; box-sizing: border-box; font-size: 14px; line-height: 1.5; color: rgb(0, 0, 0); font-family: PingFangSC-Regular, &amp;quot;Microsoft Yahei&amp;quot;; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;'&gt;在ORACLE中DBMS_RANDOM用于生成随机数、随机字符串等。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-%E2%80%94%E2%80%94DBMS_RANDOM-qian-chang.html</guid><pubDate>Mon, 01 Sep 2025 06:52:44 +0000</pubDate></item><item><title>羲和（Halo）数据库——DBMS_SQL浅尝</title><link>https://Z-Xiao-M.github.io/github.io/post/xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-%E2%80%94%E2%80%94DBMS_SQL-qian-chang.html</link><description>本文将向大家展示如何在羲和（Halo）数据库中使用DBMS\_SQL，本文测试案例除部分表结构和部分测试数据之外，其余均来自ORACLE官方测试文档，所有测试案例放置文章末尾以供学习使用。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/xi-he-%EF%BC%88Halo%EF%BC%89-shu-ju-ku-%E2%80%94%E2%80%94DBMS_SQL-qian-chang.html</guid><pubDate>Mon, 01 Sep 2025 06:47:36 +0000</pubDate></item><item><title>聊聊pg_bulkload的大概的实现逻辑</title><link>https://Z-Xiao-M.github.io/github.io/post/liao-liao-pg_bulkload-de-da-gai-de-shi-xian-luo-ji.html</link><description>&gt; 好好好，好久不见，最近偶然了解到了pg\_bulkload这一插件，然后花了点时间看了看它是如何实现的，又想到好久没有写东西了，咕了太久，有点怪不好意思的，所以决定写点东西，摆脱鸽子🕊的嫌疑。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/liao-liao-pg_bulkload-de-da-gai-de-shi-xian-luo-ji.html</guid><pubDate>Mon, 01 Sep 2025 06:32:59 +0000</pubDate></item><item><title>没有from是否能够执行count操作</title><link>https://Z-Xiao-M.github.io/github.io/post/mei-you-from-shi-fou-neng-gou-zhi-xing-count-cao-zuo.html</link><description>一、场景构建
======

这是一个非常简单的场景，这里存在一张表，表名t，往其中随便插入三行数据，然后执行查询语句：`select count(*) from t;`

    create table t(id integer);
    insert into t values(1),(2),(3);
    select count(*) from t;

执行结果

    postgres=# create table t(id integer);
    CREATE TABLE
    postgres=# insert into t values(1),(2),(3);
    INSERT 0 3
    postgres=# select count(*) from t;
     count 
    -------
         3
    (1 row)

可以看到执行count结果为3，这在正常不过了。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/mei-you-from-shi-fou-neng-gou-zhi-xing-count-cao-zuo.html</guid><pubDate>Mon, 01 Sep 2025 06:30:27 +0000</pubDate></item><item><title>外国CTO也感兴趣的开源数据库项目——openHalo</title><link>https://Z-Xiao-M.github.io/github.io/post/wai-guo-CTO-ye-gan-xing-qu-de-kai-yuan-shu-ju-ku-xiang-mu-%E2%80%94%E2%80%94openHalo.html</link><description>一、openHalo
==========

大概三个礼拜前，也就是四月一（愚人节）的时候，我们将羲和（Halo）数据库关于MySQL兼容能力这一块，独立做成了一个项目，并且在github上开源了出去。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/wai-guo-CTO-ye-gan-xing-qu-de-kai-yuan-shu-ju-ku-xiang-mu-%E2%80%94%E2%80%94openHalo.html</guid><pubDate>Mon, 01 Sep 2025 06:29:44 +0000</pubDate></item><item><title>PostgreSQL——关于autocommit功能的实现</title><link>https://Z-Xiao-M.github.io/github.io/post/PostgreSQL%E2%80%94%E2%80%94-guan-yu-autocommit-gong-neng-de-shi-xian.html</link><description>一、前言
====

文章标题为PostgreSQL——关于autocommit功能的实现，其实更为准确来说应该是psql——关于autocommit功能的实现，因为这个参数其实属于psql。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/PostgreSQL%E2%80%94%E2%80%94-guan-yu-autocommit-gong-neng-de-shi-xian.html</guid><pubDate>Mon, 01 Sep 2025 06:27:09 +0000</pubDate></item><item><title>玩一玩系列——玩玩pg_dirtyread</title><link>https://Z-Xiao-M.github.io/github.io/post/wan-yi-wan-xi-lie-%E2%80%94%E2%80%94-wan-wan-pg_dirtyread.html</link><description>一、前言
====

很早其实就知道有这么一个插件存在，叫做pg\_dirtyread，就是一直没去上手玩玩，趁着有空，写点东西。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/wan-yi-wan-xi-lie-%E2%80%94%E2%80%94-wan-wan-pg_dirtyread.html</guid><pubDate>Mon, 01 Sep 2025 06:26:19 +0000</pubDate></item><item><title>看懂PostgreSQL where子句中条件的先后执行顺序</title><link>https://Z-Xiao-M.github.io/github.io/post/kan-dong-PostgreSQL%20where-zi-ju-zhong-tiao-jian-de-xian-hou-zhi-xing-shun-xu.html</link><description>一、前言
====

前几天有个同事问了我一个问题，问题简化之后，大概如下面描述：在PostgreSQL中，存在一张表ta，表中数据存在两个值，分别是零和一。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/kan-dong-PostgreSQL%20where-zi-ju-zhong-tiao-jian-de-xian-hou-zhi-xing-shun-xu.html</guid><pubDate>Mon, 01 Sep 2025 06:25:25 +0000</pubDate></item><item><title>玩一玩系列——玩玩postgres_fdw</title><link>https://Z-Xiao-M.github.io/github.io/post/wan-yi-wan-xi-lie-%E2%80%94%E2%80%94-wan-wan-postgres_fdw.html</link><description>一、前言
====

本文仅记录和分享一下关于PostgreSQL的FDW（外部数据包装器）的简单介绍和使用，此次不包含源码分析。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/wan-yi-wan-xi-lie-%E2%80%94%E2%80%94-wan-wan-postgres_fdw.html</guid><pubDate>Mon, 01 Sep 2025 06:21:16 +0000</pubDate></item><item><title>玩一玩系列——玩玩login_hook</title><link>https://Z-Xiao-M.github.io/github.io/post/wan-yi-wan-xi-lie-%E2%80%94%E2%80%94-wan-wan-login_hook.html</link><description>一、PostgreSQL登录事件触发器
===================

在PostgreSQL17版本引入了登录事件触发器，可以用于登录之后记录一些信息或者完成一些初始化动作。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/wan-yi-wan-xi-lie-%E2%80%94%E2%80%94-wan-wan-login_hook.html</guid><pubDate>Mon, 01 Sep 2025 06:20:15 +0000</pubDate></item><item><title>明明想执行的SQL是DELETE、UPDATE，但为什么看到的是SELECT（FDW的实现原理解析）</title><link>https://Z-Xiao-M.github.io/github.io/post/ming-ming-xiang-zhi-xing-de-SQL-shi-DELETE%E3%80%81UPDATE%EF%BC%8C-dan-wei-shen-me-kan-dao-de-shi-SELECT%EF%BC%88FDW-de-shi-xian-yuan-li-jie-xi-%EF%BC%89.html</link><description>一、场景复现
======

开门见山，一个关于oracle\_fdw的简单场景如下：

    halo0root=# \d+ emp
                                                   Foreign table 'public.emp'
     Column |         Type          | Collation | Nullable | Default | FDW options  | Storage  | Stats target | Description 
    --------+-----------------------+-----------+----------+---------+--------------+----------+--------------+-------------
     name   | character varying(20) |           | not null |         | (key 'true') | extended |              | 
     age    | numeric               |           |          |         |              | main     |              | 
    Server: oradb
    FDW options: (schema 'ZM', 'table' 'EMP')
    
    halo0root=# \des+
                                                          List of foreign servers
     Name  | Owner | Foreign-data wrapper | Access privileges | Type | Version |               FDW options                | Description 
    -------+-------+----------------------+-------------------+------+---------+------------------------------------------+-------------
     oradb | halo  | oracle_fdw           |                   |      |         | (dbserver '//10.16.6.188:1521/orclpdb1') | 
    (1 row)
    
    halo0root=# EXPLAIN VERBOSE DELETE FROM emp WHERE age = 25;
                                                            QUERY PLAN                                                         
    ---------------------------------------------------------------------------------------------------------------------------
     Delete on public.emp  (cost=10000.00..20000.00 rows=0 width=0)
       Oracle statement: DELETE FROM 'ZM'.'EMP' WHERE 'NAME' = :k1
       -&gt;  Foreign Scan on public.emp  (cost=10000.00..20000.00 rows=1000 width=58)
             Output: name
             Oracle query: SELECT /*9ad36f25074bd711*/ r1.'NAME', r1.'AGE' FROM 'ZM'.'EMP' r1 WHERE (r1.'AGE' = 25) FOR UPDATE
             Oracle plan: SELECT STATEMENT
             Oracle plan:   FOR UPDATE
             Oracle plan:     BUFFER SORT
             Oracle plan:       TABLE ACCESS FULL EMP  (filter 'R1'.'AGE'=25)
     Query Identifier: -1174117518881599247
    (10 rows)

这里可以很明显的看到，虽然我们敲得是EXPLAIN VERBOSE DELETE ...，但是实际的Oracle query却是SELECT，同时UPDATE也是如此

    halo0root=# EXPLAIN VERBOSE UPDATE emp SET name = 'zzz' WHERE age = 25;
                                                            QUERY PLAN                                                         
    ---------------------------------------------------------------------------------------------------------------------------
     Update on public.emp  (cost=10000.00..20000.00 rows=0 width=0)
       Oracle statement: UPDATE 'ZM'.'EMP' SET 'NAME' = :p1 WHERE 'NAME' = :k1
       -&gt;  Foreign Scan on public.emp  (cost=10000.00..20000.00 rows=1000 width=230)
             Output: 'zzz'::character varying(20), name, emp.*
             Oracle query: SELECT /*9ad36f25074bd711*/ r1.'NAME', r1.'AGE' FROM 'ZM'.'EMP' r1 WHERE (r1.'AGE' = 25) FOR UPDATE
             Oracle plan: SELECT STATEMENT
             Oracle plan:   FOR UPDATE
             Oracle plan:     BUFFER SORT
             Oracle plan:       TABLE ACCESS FULL EMP  (filter 'R1'.'AGE'=25)
     Query Identifier: -2711433616002583057
    (10 rows)

那么问题就如文章标题所述了，这是为什么呢？

  

二、原理分析
======

原因其实也很简单，因为对于PostgreSQL而言，外部表是一种很特殊的存在，它仅仅只是一个远端表的映射，实际的数据依旧还是存储在远端，

当我们在本地的PostgreSQL访问外部表的时候，实际上就是将当前的查询语句，下发至远端数据库，再将查询到的数据传回本地的PostgreSQL中参与实际的计算之类的。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/ming-ming-xiang-zhi-xing-de-SQL-shi-DELETE%E3%80%81UPDATE%EF%BC%8C-dan-wei-shen-me-kan-dao-de-shi-SELECT%EF%BC%88FDW-de-shi-xian-yuan-li-jie-xi-%EF%BC%89.html</guid><pubDate>Mon, 01 Sep 2025 06:19:02 +0000</pubDate></item><item><title>在PostgreSQL中，你不仅可以看到Bad Apple，还可以看故人唱跳、rap、打篮球</title><link>https://Z-Xiao-M.github.io/github.io/post/zai-PostgreSQL-zhong-%EF%BC%8C-ni-bu-jin-ke-yi-kan-dao-Bad%20Apple%EF%BC%8C-huan-ke-yi-kan-gu-ren-chang-tiao-%E3%80%81rap%E3%80%81-da-lan-qiu.html</link><description>一、前言
====

也是在前不久，我翻到了一个“有趣”的项目，如标题所言，这个PostgreSQL插件项目就是可能做到在psql客户端播放Bad Apple，和鸽鸽的唱跳、rap、打篮球的名场面。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/zai-PostgreSQL-zhong-%EF%BC%8C-ni-bu-jin-ke-yi-kan-dao-Bad%20Apple%EF%BC%8C-huan-ke-yi-kan-gu-ren-chang-tiao-%E3%80%81rap%E3%80%81-da-lan-qiu.html</guid><pubDate>Mon, 01 Sep 2025 06:18:11 +0000</pubDate></item><item><title>简单聊聊PostgreSQL中的多态伪类型</title><link>https://Z-Xiao-M.github.io/github.io/post/jian-dan-liao-liao-PostgreSQL-zhong-de-duo-tai-wei-lei-xing.html</link><description>一、前言
====

也是好久没有写文章了，主要是前阵子比较忙，还有外加上喜欢骑车出去兜风，以至于一而再，再而三的咕咕。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/jian-dan-liao-liao-PostgreSQL-zhong-de-duo-tai-wei-lei-xing.html</guid><pubDate>Sun, 31 Aug 2025 08:18:02 +0000</pubDate></item><item><title>搭建一个多主复制数据回环场景</title><link>https://Z-Xiao-M.github.io/github.io/post/da-jian-yi-ge-duo-zhu-fu-zhi-shu-ju-hui-huan-chang-jing.html</link><description>一、前言
====

最近也是看着看着，看到了逻辑复制这块，事实上我很少接触过这块，所以就当练练手了。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/da-jian-yi-ge-duo-zhu-fu-zhi-shu-ju-hui-huan-chang-jing.html</guid><pubDate>Sun, 31 Aug 2025 08:03:25 +0000</pubDate></item><item><title>PostgreSQL——关于临时表的二三事</title><link>https://Z-Xiao-M.github.io/github.io/post/PostgreSQL%E2%80%94%E2%80%94-guan-yu-lin-shi-biao-de-er-san-shi.html</link><description># 一、前言

说起临时表，多数的DBA同学们第一时间都会想到Oracle的全局临时表，而对于PG而言，虽然存在对应的全局临时表语法，但是并没有实质的全局临时表功能。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/post/PostgreSQL%E2%80%94%E2%80%94-guan-yu-lin-shi-biao-de-er-san-shi.html</guid><pubDate>Sun, 31 Aug 2025 04:06:59 +0000</pubDate></item><item><title>关于</title><link>https://Z-Xiao-M.github.io/github.io/about.html</link><description>目前暂时空空如也~。</description><guid isPermaLink="true">https://Z-Xiao-M.github.io/github.io/about.html</guid><pubDate>Sun, 31 Aug 2025 07:27:51 +0000</pubDate></item></channel></rss>